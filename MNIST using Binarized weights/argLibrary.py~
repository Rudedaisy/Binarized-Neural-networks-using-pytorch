import torch
import argparse

parser = argparse.ArgumentParser(description='MNIST Binarized weights')
parser.add_argument('--batch-size', type=int, default=64, metavar='N',help='input batch size , default =64')
parser.add_argument('--test-batch-size', type=int, default=64, metavar='N',help='input batch size for testing default=64')
parser.add_argument('--epochs', type=int, default=10, metavar='N',help='number of epochs to train (default: 10)')
parser.add_argument('--lr', type=float, default=0.01, metavar='LR',help='learning rate (default: 0.01)')
parser.add_argument('--momentum', type=float, default=0.5, metavar='M',help='SGD momentum (default: 0.5)')
parser.add_argument('--no-cuda', action='store_true', default=False,help='disables CUDA training')
parser.add_argument('--seed', type=int, default=1, metavar='S',help='random seed,default=1)')
parser.add_argument('--eps', type=float, default=1e-5, metavar='LR',help='learning rate,default=1e-5')
parser.add_argument('--log-interval', type=int, default=100, metavar='N',help='for printing  training data is log interval')
parser.add_argument('--reg', type=float, default = 0.2, metavar'reg',help='regularization strength')
parser.add_argument('--no-bin-acts', action='store_true',default=False, help='remove binarization of the intermediate and output feature maps?')
parser.add_argument('--no-bin-weights', action='store_true', default=False, help='remove binarization of the weights?')
parser.add_argument('--bin-zero', action='store_true', default=False, help='binarize scheme 0/+1? (instead of -1/+1')
args = parser.parse_args()
args.cuda = not args.no_cuda and torch.cuda.is_available()
args.bin_acts = not args.no_bin_acts
args.bin_weights = not args.no_bin_weights
